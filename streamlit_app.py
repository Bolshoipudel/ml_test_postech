
import streamlit as st
import httpx
import json
import os
from datetime import datetime
from typing import Dict, Any, List, Optional


# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# API URL –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Docker)
API_URL = os.getenv("API_URL", "http://localhost:8000")
PAGE_TITLE = "LLM Assistant"
PAGE_ICON = "ü§ñ"

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
TOOL_ICONS = {
    "sql": "üóÑÔ∏è",
    "rag": "üìö",
    "web_search": "üåê",
    "router": "üß≠",
    "none": "‚ùì"
}

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
TOOL_COLORS = {
    "sql": "#3498db",      # –°–∏–Ω–∏–π
    "rag": "#2ecc71",      # –ó–µ–ª–µ–Ω—ã–π
    "web_search": "#e67e22",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    "router": "#9b59b6",   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "none": "#95a5a6"      # –°–µ—Ä—ã–π
}

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
EXAMPLE_QUERIES = {
    "üìä SQL –∑–∞–ø—Ä–æ—Å—ã": [
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ PT Sandbox?",
        "–ö–∞–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –µ—Å—Ç—å –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º PT?",
        "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º"
    ],
    "üìö –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö": [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ PT Application Inspector?",
        "–ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É PT Sandbox?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ PT Network Attack Discovery"
    ],
    "üåê –í–µ–±-–ø–æ–∏—Å–∫": [
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ Application Security",
        "–ù–æ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö"
    ],
    "üîÄ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ": [
        "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ PT AI –∏ –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏?",
        "–ü–æ–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É PT Sandbox –∏ –æ–ø–∏—à–∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "–ö–∞–∫–∏–µ —Ñ–∏—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è PT NAD?"
    ]
}


# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´
# =============================================================================

st.set_page_config(
    page_title=PAGE_TITLE,
    page_icon=PAGE_ICON,
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main {
        background-color: #f5f7fa;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π */
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö */
    .metadata-box {
        background-color: #f8f9fa;
        border-left: 4px solid #6c757d;
        padding: 0.75rem;
        margin: 0.5rem 0;
        border-radius: 0.25rem;
        font-size: 0.9em;
    }

    .tool-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.85em;
        font-weight: 500;
        margin: 0.25rem;
    }

    .source-item {
        padding: 0.25rem 0.5rem;
        margin: 0.25rem 0;
        background-color: #e9ecef;
        border-radius: 0.25rem;
        font-size: 0.85em;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
    .sidebar .element-container {
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)


# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SESSION STATE
# =============================================================================

if "messages" not in st.session_state:
    st.session_state.messages = []

if "session_id" not in st.session_state:
    st.session_state.session_id = None

if "use_history" not in st.session_state:
    st.session_state.use_history = True

if "stats" not in st.session_state:
    st.session_state.stats = None


# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° API
# =============================================================================

def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API."""
    try:
        response = httpx.get(f"{API_URL}/api/v1/health", timeout=5.0)
        return response.status_code == 200
    except Exception:
        return False


def send_message(message: str, use_history: bool = True) -> Optional[Dict[str, Any]]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ API."""
    try:
        payload = {
            "message": message,
            "use_history": use_history,
            "session_id": st.session_state.session_id
        }

        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."):
            response = httpx.post(
                f"{API_URL}/api/v1/chat",
                json=payload,
                timeout=60.0
            )

        if response.status_code == 200:
            data = response.json()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id
            if "session_id" in data:
                st.session_state.session_id = data["session_id"]
            return data
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return None

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return None


def get_stats() -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        response = httpx.get(f"{API_URL}/api/v1/stats", timeout=5.0)
        if response.status_code == 200:
            return response.json()
        return None
    except Exception:
        return None


def clear_history() -> bool:
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    try:
        if st.session_state.session_id:
            response = httpx.delete(
                f"{API_URL}/api/v1/history/{st.session_state.session_id}",
                timeout=5.0
            )
            return response.status_code == 200
        return True
    except Exception:
        return False


# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
# =============================================================================

def render_tool_badge(tool_type: str, confidence: Optional[float] = None) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML badge –¥–ª—è —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    icon = TOOL_ICONS.get(tool_type, "‚ùì")
    color = TOOL_COLORS.get(tool_type, "#95a5a6")
    label = tool_type.upper()

    confidence_text = ""
    if confidence is not None:
        confidence_text = f" ({confidence:.0%})"

    return f"""
    <span class="tool-badge" style="background-color: {color}; color: white;">
        {icon} {label}{confidence_text}
    </span>
    """


def render_metadata(response_data: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞."""
    tools_used = response_data.get("tools_used", [])
    sources = response_data.get("sources", [])

    if not tools_used and not sources:
        return

    with st.expander("üîç –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=False):
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if tools_used:
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:**")

            for tool in tools_used:
                tool_type = tool.get("tool_type", "none")
                confidence = tool.get("confidence")
                reasoning = tool.get("reasoning")
                result_summary = tool.get("result_summary")
                metadata = tool.get("metadata", {})

                # Badge –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                st.markdown(
                    render_tool_badge(tool_type, confidence),
                    unsafe_allow_html=True
                )

                # Reasoning (—Ç–æ–ª—å–∫–æ –¥–ª—è router)
                if tool_type == "router" and reasoning:
                    st.caption(f"üí≠ **–õ–æ–≥–∏–∫–∞:** {reasoning}")

                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                if result_summary:
                    st.caption(f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result_summary}")

                # SQL –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if tool_type == "sql" and metadata.get("sql_query"):
                    with st.expander("SQL –∑–∞–ø—Ä–æ—Å"):
                        st.code(metadata["sql_query"], language="sql")

                st.markdown("---")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if sources:
            st.markdown("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**")
            for source in sources:
                st.markdown(f"- üîó {source}")


def render_example_queries():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    st.sidebar.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")

    for category, queries in EXAMPLE_QUERIES.items():
        with st.sidebar.expander(category):
            for query in queries:
                if st.button(query, key=f"example_{hash(query)}", use_container_width=True):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç
                    st.session_state.messages.append({
                        "role": "user",
                        "content": query,
                        "timestamp": datetime.now().isoformat()
                    })

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    response = send_message(query, st.session_state.use_history)

                    if response:
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": response.get("message", ""),
                            "metadata": response,
                            "timestamp": datetime.now().isoformat()
                        })
                        st.rerun()


def render_sidebar():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏."""
    with st.sidebar:
        st.title(f"{PAGE_ICON} {PAGE_TITLE}")
        st.markdown("---")

        # –°—Ç–∞—Ç—É—Å API
        st.markdown("### üîå –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        api_healthy = check_api_health()

        if api_healthy:
            st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.caption(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {API_URL}")

        st.markdown("---")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        st.session_state.use_history = st.toggle(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            value=st.session_state.use_history,
            help="–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", use_container_width=True):
                clear_history()
                st.session_state.messages = []
                st.session_state.session_id = None
                st.rerun()

        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                st.session_state.stats = get_stats()
                st.rerun()

        st.markdown("---")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if api_healthy:
            st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

            if st.session_state.stats is None:
                st.session_state.stats = get_stats()

            if st.session_state.stats:
                stats = st.session_state.stats

                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–°–µ—Å—Å–∏–π", stats.get("total_sessions", 0))
                    st.metric("–°–æ–æ–±—â–µ–Ω–∏–π", stats.get("total_messages", 0))

                with col2:
                    st.metric("–û—Ç–∑—ã–≤–æ–≤", stats.get("total_feedback", 0))
                    avg_rating = stats.get("average_rating", 0)
                    st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_rating:.1f}/5")

                st.caption(f"ü§ñ LLM: {stats.get('active_llm_provider', 'N/A')}")
                st.caption(f"üóÑÔ∏è Vector Store: {stats.get('active_vector_store', 'N/A')}")

        st.markdown("---")

        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        render_example_queries()

        st.markdown("---")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        st.markdown("### ‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        st.caption("**LLM Assistant** - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        st.caption("üîπ RAG –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        st.caption("üîπ SQL –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î")
        st.caption("üîπ –í–µ–±-–ø–æ–∏—Å–∫")
        st.caption("üîπ –£–º–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è")

        st.markdown("---")
        st.caption("Made with ‚ù§Ô∏è")

def main():
    render_sidebar()

    st.title("üí¨ –ß–∞—Ç —Å LLM Assistant")
    st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö PT, –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    if not check_api_health():
        st.error("""
        ‚ö†Ô∏è **API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!**

        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:
        ```bash
        python -m uvicorn app.main:app --reload
        ```
        """)
        st.stop()

    for message in st.session_state.messages:
        role = message["role"]
        content = message["content"]

        with st.chat_message(role):
            st.markdown(content)

            if role == "assistant" and "metadata" in message:
                render_metadata(message["metadata"])

    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        st.session_state.messages.append({
            "role": "user",
            "content": prompt,
            "timestamp": datetime.now().isoformat()
        })

        with st.chat_message("user"):
            st.markdown(prompt)

        response = send_message(prompt, st.session_state.use_history)

        if response:
            assistant_message = {
                "role": "assistant",
                "content": response.get("message", ""),
                "metadata": response,
                "timestamp": datetime.now().isoformat()
            }
            st.session_state.messages.append(assistant_message)

            with st.chat_message("assistant"):
                st.markdown(response.get("message", ""))
                render_metadata(response)

            st.session_state.stats = get_stats()
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")


if __name__ == "__main__":
    main()
